<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MarketRepository">

    <select id="readMarketList" parameterType="Map" resultMap="market">
        select
            tm.id
            , tm.quantity
            , tm.price
            , tm.fees
            , tm.status
        <choose>
            <when test="user != null">
                    , exists(
                        select
                            1
                        from tbl_market_like tml
                        where tm.id = tml.market_id
                        and tml.user_id = #{user.id}
                    ) as isLike
            </when>
            <otherwise>
                    , false as isLike
            </otherwise>
        </choose>
            , tm.created_at
            , tm.updated_at
            , seller.id user_id
            , seller.username user_username
            , seller.name user_name
            , seller.phone user_phone
            , tmp.id purchase_id
            , tmp.status purchase_status
            , tmp.reason purchase_reason
            , tmp.canceled_at purchase_canceled_at
            , tmp.approved_at purchase_approved_at
            , tmp.created_at purchase_created_at
            , tmp.updated_at purchase_updated_at
            , tmp.id purchase_id
            , tmp.id purchase_id
            , buyer.id purchase_buyer_id
            , buyer.username purchase_buyer_username
            , buyer.name purchase_buyer_name
            , buyer.phone purchase_buyer_phone
        from tbl_market tm
        left outer join tbl_market_purchase tmp on tm.id = tmp.market_id and tmp.status <![CDATA[<>]]> 'CANCEL'
        inner join tbl_user seller on tm.seller_id = seller.id
        left outer join tbl_user buyer on tmp.buyer_id = buyer.id
        <where>
            <if test="query != null and !query.equals('')">
                and (seller.username LIKE concat('%', #{query}, '%') OR seller.name LIKE concat('%', #{query}, '%'))
            </if>
            <if test="seller_id != null">
                and seller.id = #{seller_id}
            </if>
            <if test="status != null">
                and tm.status = #{status}
            </if>
            <if test="order != null and order.type.equals('LIKE')">
                <if test="user != null">
                    and exists(select 1 from tbl_market_like tml where tm.id = tml.market_id and tml.user_id = #{user.id})
                </if>
            </if>
            <if test="buyer_id != null">
                and buyer.id = #{buyer_id}
            </if>
            <if test="duration != null">
                <choose>
                    <when test="'TODAY'.equals(duration)">
                        and tm.created_at between curdate() and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'1WEEK'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -1 WEEK) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'1MONTH'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -1 MONTH) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'3MONTH'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -3 MONTH) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'6MONTH'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -6 MONTH) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'1YEAR'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -1 YEAR) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                </choose>
            </if>
            <if test="statuses != null">
                and tm.status in
                <foreach collection="statuses" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        <if test="order != null">
            <choose>
                <when test="order.type.equals('RECENT')">
                    order by tm.created_at ${order.power}
                </when>
                <when test="order.type.equals('PRICE')">
                    order by tm.price ${order.power}
                </when>
            </choose>
        </if>
        <if test="paging != null">
            limit #{paging.limit} offset #{paging.offset}
        </if>
    </select>

    <select id="countMarketList" parameterType="Map" resultType="Long">
        select
            count(1)
        from tbl_market tm
        inner join tbl_user tu on tm.seller_id = tu.id
        <where>
            <if test="query != null and !query.equals('')">
                and (tu.username LIKE concat('%', #{query}, '%') OR tu.name LIKE concat('%', #{query}, '%'))
            </if>
            <if test="seller_id != null">
                and tu.id = #{seller_id}
            </if>
            <if test="status != null">
                and tm.status = #{status}
            </if>
            <if test="order != null and order.type.equals('LIKE')">
                <if test="user != null">
                    and exists(select 1 from tbl_market_like tml where tm.id = tml.market_id and tml.user_id = #{user.id})
                </if>
            </if>
            <if test="buyer_id != null">
                and exists(
                select 1 from tbl_market_purchase tmp where tmp.market_id = tm.id and tmp.buyer_id = #{buyer_id}
                )
            </if>
            <if test="duration != null">
                <choose>
                    <when test="'TODAY'.equals(duration)">
                        and tm.created_at between curdate() and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'1WEEK'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -1 WEEK) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'1MONTH'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -1 MONTH) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'3MONTH'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -3 MONTH) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'6MONTH'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -6 MONTH) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                    <when test="'1YEAR'.equals(duration)">
                        and tm.created_at between date_add(curdate(), INTERVAL -1 YEAR) and date_add(curdate(), INTERVAL 1 DAY)
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <select id="readMarket" parameterType="Map" resultMap="market">
        select
        tm.id
        , tm.quantity
        , tm.price
        , tm.fees
        , tm.status
        <choose>
            <when test="user != null">
                , exists(
                select
                1
                from tbl_market_like tml
                where tm.id = tml.market_id
                and tml.user_id = #{user.id}
                )
            </when>
            <otherwise>
                , false
            </otherwise>
        </choose>
        , tm.created_at
        , tm.updated_at
        , seller.id user_id
        , seller.username user_username
        , seller.name user_name
        , seller.phone user_phone
        , tmp.id purchase_id
        , tmp.status purchase_status
        , tmp.reason purchase_reason
        , tmp.canceled_at purchase_canceled_at
        , tmp.approved_at purchase_approved_at
        , tmp.created_at purchase_created_at
        , tmp.updated_at purchase_updated_at
        , tmp.id purchase_id
        , tmp.id purchase_id
        , buyer.id purchase_buyer_id
        , buyer.username purchase_buyer_username
        , buyer.name purchase_buyer_name
        , buyer.phone purchase_buyer_phone
        from tbl_market tm
        left outer join tbl_market_purchase tmp on tm.id = tmp.market_id and tmp.status <![CDATA[<>]]> 'CANCEL'
        inner join tbl_user seller on tm.seller_id = seller.id
        left outer join tbl_user buyer on tmp.buyer_id = buyer.id
        <where>
            <if test="market_id != null">
                and tm.id = #{market_id}
            </if>
        </where>
    </select>

    <insert id="createMarket" parameterType="Map">
        insert into tbl_market (seller_id, quantity, price, fees)
        values (#{seller_id}, #{quantity}, #{price}, #{fees})
    </insert>

    <update id="updateMarket" parameterType="Map">
        update tbl_market
        <set>
            <if test="quantity != null">
                quantity = #{quantity}
            </if>
            <if test="price != null">
                , price = #{price}
            </if>
            <if test="status != null">
                , `status` = #{status}
            </if>
            <if test="canceled_at != null">
                , canceled_at = #{canceled_at}
            </if>
            <if test="approved_at != null">
                , approved_at = #{approved_at}
            </if>
        </set>
        <where>
            <if test="market_id != null">
                and id = #{market_id}
            </if>
        </where>
    </update>

    <resultMap id="market" type="Market">
        <id column="id" property="id" />
        <result column="quantity" property="quantity" />
        <result column="price" property="price" />
        <result column="fees" property="fees" />
        <result column="status" property="status" />
        <result column="isLike" property="isLike" />
        <result column="created_at" property="created_at" />
        <result column="updated_at" property="updated_at" />
        <association property="seller">
            <id column="user_id" property="id" />
            <result column="user_username" property="username" />
            <result column="user_name" property="name" />
            <result column="user_phone" property="phone" />
        </association>
        <association property="purchase" columnPrefix="purchase_">
            <id column="id" property="id" />
            <result column="status" property="status" />
            <result column="reason" property="reason" />
            <result column="canceled_at" property="canceled_at" />
            <result column="approved_at" property="approved_at" />
            <result column="created_at" property="created_at" />
            <result column="updated_at" property="updated_at" />
            <association property="buyer" columnPrefix="buyer_">
                <id column="id" property="id" />
                <result column="username" property="username" />
                <result column="name" property="name" />
                <result column="phone" property="phone" />
            </association>
        </association>
</resultMap>

</mapper>